---
- name: check if caddy is installed
  stat:
    path: "{{ caddy_binary_local_dir }}/caddyserver"
  register: __caddy_is_installed
  become: true
  tags: caddy

- name: create group
  group:
    name: "{{ caddy_system_group }}"
    system: true
    state: present
  when: caddy_system_group != "root" and (not __caddy_is_installed.stat.exists)
  become: true
  tags: caddy

- name: create user
  user:
    name: "{{ caddy_system_user }}"
    system: true
    shell: "/sbin/nologin"
    group: "{{ caddy_system_group }}"
    createhome: false
  when: caddy_system_user != "root" and (not __caddy_is_installed.stat.exists)
  become: true
  tags: caddy

- name: create default directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ caddy_system_user }}"
    group: "{{ caddy_system_group }}"
    mode: 0755
  with_items:
    - "{{ caddy_config_path }}"
    - "{{ caddy_config_path }}/conf.d"
    - "{{ caddy_log_path }}"
    - "{{ caddy_data_path }}"
    - "{{ caddy_storage_path }}"
    - "{{ caddy_storage_path }}/.storage"
  become: true
  tags: caddy

- name: copy binary file
  copy:
    src: "caddyserver_{{ go_arch }}"
    dest: "{{ caddy_binary_local_dir }}/caddy"
    owner: root
    group: root
    mode: 0755
  when: not __caddy_is_installed.stat.exists
  become: true
  tags: caddy

- name: copy web folder files
  copy:
    src: "{{ item }}"
    dest: "{{ caddy_data_path }}/{{ item }}"
    owner: "{{ caddy_system_user }}"
    group: "{{ caddy_system_group }}"
    mode: 0644
  with_items:
    - index.html
  become: true
  tags: caddy

- name: configure logrotate
  template:
    src: caddy_logrotate.conf.j2
    dest: "/etc/logrotate.d/caddy"
    owner: root
    group: root
    mode: '0644'
  become: true
  tags: caddy

- name: create config
  template:
    src: caddy.conf.j2
    dest: "{{ caddy_config_path }}/caddy.conf"
    owner: "{{ caddy_system_user }}"
    group: "{{ caddy_system_group }}"
    mode: 0644
    validate: "{{ caddy_binary_local_dir }}/caddy validate -config %s -adapter caddyfile"
  notify: reload caddy
  become: true
  tags: caddy

- name: create tls configs
  template:
    src: caddy.tls.conf.j2
    dest: "{{ caddy_config_path }}/conf.d/tls.conf"
    owner: "{{ caddy_system_user }}"
    group: "{{ caddy_system_group }}"
    mode: 0644
    validate: "{{ caddy_binary_local_dir }}/caddy validate -config %s -adapter caddyfile"
  notify: reload caddy
  become: true
  tags: caddy

- include_tasks: vhosts.yml
  vars:
    vhost: '{{ caddy_vhost_defaults | combine(vhost_) }}'
  loop: '{{ caddy_vhosts }}'
  loop_control:
    loop_var: vhost_
  tags:
    - caddy
    - caddy_vhosts

- name: create systemd unit
  template:
    src: caddy.service.j2
    dest: /etc/systemd/system/caddy.service
    owner: root
    group: root
    mode: 0644
  notify: restart caddy
  become: true
  tags: caddy

- name: enable capabilities to ports lower than port 1024
  capabilities:
    path: "{{ caddy_binary_install_dir }}/caddy"
    capability: CAP_NET_BIND_SERVICE+ep
    state: present
  tags: caddy

- name: allow binding to port in selinux
  seport:
    ports:
      - 80
      - 443
    proto: tcp
    setype: http_port_t
    state: present
  when:
    - ansible_version.full is version_compare('2.4', '>=')
    - ansible_selinux.status == "enabled"
  become: true
  tags: caddy

- name: check whether ufw status is active
  command: "ufw status"
  changed_when: False
  ignore_errors: True
  register: _ufw_status
  become: true
  when:
    - caddy_allow_firewall
    - ansible_os_family == 'Debian'
  tags: caddy

- name: check whether firewalld status is active
  command: "firewall-cmd --state"
  changed_when: False
  ignore_errors: True
  register: _firewalld_status
  become: true
  when: ansible_os_family == 'RedHat'
  tags: caddy

- name: configure ufw
  community.general.ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
    state: enabled
    comment: "caddy"
  notify: reload ufw
  with_items:
    - 80
    - 443
  become: true
  tags: caddy
  when:
    - "'active' in _ufw_status.stdout"
    - ansible_os_family == 'Debian'
    - caddy_allow_firewall

- name: configure firewalld
  firewalld:
    port: "{{ item }}/tcp"
    permanent: yes
    state: true
  with_items:
    - 80
    - 443
  when:
    - "'running' in _firewalld_status.stdout"
    - caddy_allow_firewall
    - ansible_os_family == 'RedHat'
  notify: reload firewalld
  become: true
  tags: caddy

- name: start and enable service
  systemd:
    daemon_reload: true
    name: caddy
    state: started
    enabled: true
  become: true
  tags: caddy
