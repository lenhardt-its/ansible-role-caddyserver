---
- name: check if caddy is installed
  stat:
    path: "/usr/local/bin/caddyserver"
  register: __caddy_is_installed
  become: true
  tags: caddy

- name: create group
  group:
    name: "{{ caddy_group }}"
    system: true
    state: present
  when: caddy_group != "root" and (not __caddy_is_installed.stat.exists)
  become: true
  tags: caddy

- name: create user
  user:
    name: "{{ caddy_user }}"
    system: true
    shell: "/sbin/nologin"
    group: "{{ caddy_group }}"
    createhome: false
  when: caddy_user != "root" and (not __caddy_is_installed.stat.exists)
  become: true
  tags: caddy

- name: create default directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ caddy_user }}"
    group: "{{ caddy_group }}"
    mode: 0755
  with_items:
    - /etc/caddy
    - /etc/caddy/conf.d
    - /var/lib/caddy
    - /var/lib/caddy/.storage
    - /var/www
    - /var/log/caddy
  become: true
  tags: caddy

- name: copy binary file
  copy:
    src: "caddyserver_{{ go_arch }}"
    dest: "/usr/local/bin/caddy"
    owner: root
    group: root
    mode: 0755
  when: not __caddy_is_installed.stat.exists
  become: true
  tags: caddy

- name: copy basic html not_allowed and logo file
  copy:
    src: "{{ item }}"
    dest: "/var/www/{{ item }}"
    owner: "{{ caddy_user }}"
    group: "{{ caddy_group }}"
    mode: 0644
  with_items:
    - index.html
  become: true
  tags: caddy

- name: configure logrotate
  template:
    src: caddy_logrotate.conf.j2
    dest: "/etc/logrotate.d/caddy"
    owner: root
    group: root
    mode: '0644'
  become: true
  tags: caddy

- name: create config
  template:
    src: caddy.conf.j2
    dest: /etc/caddy/caddy.conf
    owner: "{{ caddy_user }}"
    group: "{{ caddy_group }}"
    mode: 0644
  notify: restart caddy
  become: true
  tags: caddy

- name: create custom directories
  file:
    path: "{{ item.folder }}"
    state: directory
    owner: "{{ caddy_user }}"
    group: "{{ caddy_group }}"
    mode: 0755
  with_items: "{{ caddy_config }}"
  when: caddy_config is defined
  become: true
  tags: caddy

- name: create custom configs
  template:
    src: caddy.custom.conf.j2
    dest: "/etc/caddy/conf.d/vhost_{{ item.name }}.conf"
    owner: "{{ caddy_user }}"
    group: "{{ caddy_group }}"
    mode: 0644
  with_items: "{{ caddy_config }}"
  when: caddy_config is defined
  notify: reload caddy
  become: true
  tags: caddy

- name: copy custom items
  copy:
    src: "{{ item.copy_item }}"
    dest: "{{ item.folder }}/{{ item.copy_item }}"
    owner: "{{ caddy_user }}"
    group: "{{ caddy_group }}"
    mode: 0644
  with_items: "{{ caddy_config }}"
  when:
    - caddy_config is defined
    - item.copy_item is defined
  notify: reload caddy
  become: true
  tags: caddy

- name: create systemd unit
  template:
    src: caddy.service.j2
    dest: /etc/systemd/system/caddy.service
    owner: root
    group: root
    mode: 0644
  notify: restart caddy
  become: true
  tags: caddy

- name: enable capabilities to ports lower than port 1024
  capabilities:
    path: "{{ caddy_binary_install_dir }}/caddy"
    capability: CAP_NET_BIND_SERVICE+ep
    state: present
  when: caddy_web_listen_port <= 1024

- name: allow binding to port in selinux
  seport:
    ports: "{{ caddy_web_listen_port }}"
    proto: tcp
    setype: http_port_t
    state: present
  when:
    - ansible_version.full is version_compare('2.4', '>=')
    - ansible_selinux.status == "enabled"
  become: true
  tags: caddy

- name: check whether ufw status is active
  command: "ufw status"
  changed_when: False
  ignore_errors: True
  register: _ufw_status
  become: true
  when:
    - caddy_allow_firewall
    - ansible_os_family == 'Debian'
  tags: caddy

- name: configure ufw
  community.general.ufw:
    rule: allow
    port: "{{ caddy_web_listen_port }}"
    proto: tcp
    state: enabled
    comment: "caddy"
  notify: reload ufw
  become: true
  tags: caddy
  register: "_firewalld_caddy_state"
  when:
    - "'active' in _ufw_status.stdout"
    - ansible_os_family == 'Debian'
    - caddy_allow_firewall

- name: reload ufw
  systemd:
    name: ufw
    state: reloaded
  when:
    - _firewalld_caddy_state['changed']
    - ansible_os_family == 'Debian'
    - caddy_allow_firewall
  become: true
  tags: caddy

- name: configure firewalld
  firewalld:
    port: "{{ caddy_web_listen_port }}/tcp"
    permanent: yes
    state: true
  when:
    - caddy_allow_firewall
    - ansible_os_family == 'RedHat'
  register: "_firewalld_caddy_state"
  become: true
  tags: caddy

- name: reload firewalld
  systemd:
    name: firewalld
    state: reloaded
  when:
    - caddy_allow_firewall
    - _firewalld_caddy_state['changed']
    - - ansible_os_family == 'RedHat'
  become: true
  tags: caddy

- name: start and enable service
  systemd:
    daemon_reload: true
    name: caddy
    state: started
    enabled: true
  become: true
  tags: caddy

- name: configure consul services
  template:
    src: consul.service.json.j2
    dest: "/etc/consul.d/{{ item.name.split(\"-\")[1] }}.json"
    owner: consul
    group: consul
    mode: 0644
  with_items: "{{ consul_service_config }}"
  notify: reload consul
  become: true
  tags:
    - caddy
    - consul
